#!/usr/bin/env python
"""
This script uses FSL's functionality to extract the eigenvariate of all ROIs in a mask image.
In this process, the mask image is split to yield one mask image for each ROI.
Those are saved in a specified working directory.
"""

from mvpa2.datasets.mri import map2nifti, fmri_dataset
import os
from nipype.interfaces.fsl.utils import ImageMeants
import csv
import numpy as np


def split_mask(mask_image, workdir):
    """
    Split a mask with multiple ROIs into seperate files for each ROI.
    Saves them in 'workdir/roi_masks'.
    returns a list of paths for each produced mask file.
    """

    ms = fmri_dataset(mask_image)

    maskpath = os.path.join(workdir, 'roi_masks')

    if not os.path.exists(maskpath):
        os.makedirs(maskpath)

    # list of paths for each roi mask
    maskfiles = []

    # save seperate mask for each roi to file in workdir
    for roivalue in range(1, max(ms.samples[0]) + 1):
        msc = ms.copy()
        msc.samples[0][msc.samples[0] != roivalue] = False
        image = map2nifti(msc)
        maskfile = os.path.join(maskpath, 'roi{}_mask.nii.gz'.format(roivalue))
        image.to_filename(maskfile)
        maskfiles.append(maskfile)

    return maskfiles


def extract_eigenv_roi(bold_image, mask, csvpath, sub, run):
    """
    Use fsl.ImageMeants to extract eigenvariate
    """

    if not os.path.exists(csvpath):
        os.makedirs(csvpath)

    extract_eigv = ImageMeants(in_file=bold_image,
                               terminal_output='file', eig=True,
                               mask=mask,
                               out_file=os.path.join(
                                   csvpath, '{}_{}_{}.csv'.format(sub, run, mask.replace('_mask.nii.gz', '')[-4:])))
    extract_eigv.run()


def concat_rois(csvpath, outfile):
    """
    concatinate the csv files generated by fsl for each roi into one csv
    """

    csvs = os.listdir(csvpath)

    out = []

    for cs in csvs:

        with open(os.path.join(csvpath, cs)) as f:
            reader = csv.reader(f)

            temp = []
            for row in reader:
                temp.append(float(row[0]))
            np_temp = np.array(temp)

        out.append(np_temp)

        with open(outfile, 'wb') as f:
            writer = csv.writer(f)
            writer.writerow(range(1, len(out) + 1))
            for idx in range(len(np_temp)):
                row = [element[idx] for element in out]
                writer.writerow(row)


def extract_eigenvariate_famfaces(datadir, workdir, sub, run, mask_image,
                                  ecpreproc=False):
    """
    execute split_mask, extract_eigenv_roi, and concat_rois
    for given run of given subject.
    """

    # split mask
    maskfiles = split_mask(mask_image, workdir)

    # path template is different for data preprocessed for EC analysis
    if ecpreproc:
        run_shortstring = run.replace('run0', 'run')
        bold_image = os.path.join(datadir, sub, 'residual4d', 'mni', 'res4d_%s.nii.gz' % run_shortstring)
    else:
        bold_image = os.path.join(datadir, sub, 'bold', run, 'bold_mni.nii.gz')

    csvpath = os.path.join(workdir, 'csv', sub, run)

    if not os.path.exists(csvpath):
        os.makedirs(csvpath)

    # extract eigenvariate for each roi mask
    for mask in maskfiles:
        extract_eigenv_roi(bold_image=bold_image, mask=mask,
                           csvpath=csvpath, sub=sub, run=run)

    # concatinate all roi specific csvs into one csv
    outfile_allrois = os.path.join(workdir, 'csv', sub, run, '{}_{}_all.csv'.format(sub, run))
    concat_rois(csvpath=csvpath, outfile=outfile_allrois)

"""
def source_fsl(fslpath='/etc/fsl/fsl.sh'):
    """""""
    Source FSL by wrapping the bash command in a tremendously complicated manner.
    """"""
    import os
    import pprint
    import subprocess
    command = ['bash', '-c', 'source %s' % fslpath]
    proc = subprocess.Popen(command, stdout=subprocess.PIPE)
    for line in proc.stdout:
        (key, _, value) = line.partition("=")
        os.environ[key] = value
    proc.communicate()
    pprint.pprint(dict(os.environ))
"""

if __name__ == '__main__':

    # can't make this work, source from bash script and/or condor submission file
    # source_fsl()

    # get subjectID from command line argument
    import sys
    subj = sys.argv[1]

    # preprocessed data set in mni space
    # dat = '/data/famface/openfmri/oli/results_with_main_effect/l1ants_fwhm6_hp60_derivs_frac0.1/model001/task001'
    # specifically for EC preprocessed data
    dat = '/data/famface/openfmri/oli/results/ec_preproc/'

    # working directory stores temporary csv files
    work = os.path.join('/data', 'famface', 'openfmri', 'oli', 'results', 'extract_eigenv_ecp', 'workdir')
    # path to mask image
    mask = '/data/famface/openfmri/scripts/notebooks/rois_manual_r5_20170222_nooverlap.nii.gz'

    for run in ['run%03d' % i for i in range(1, 12)]:
        extract_eigenvariate_famfaces(dat, work, subj, run, mask, ecpreproc=True)
        print('finished %s %s' % (subj, run))
